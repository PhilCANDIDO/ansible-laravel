#!/bin/bash
# Collection de scripts et templates pour Certbot SSL

## roles/certbot/templates/certbot-renew.sh.j2
#!/bin/bash
# Certbot SSL certificate renewal script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

CERTBOT_CONFIG_DIR="{{ certbot_config_dir }}"
CERTBOT_LOGS_DIR="{{ certbot_logs_dir }}"
WEBSERVER_TYPE="{{ webserver_type | default('nginx') }}"
PRIMARY_DOMAIN="{{ certbot_primary_domain }}"

# Logging
LOG_FILE="${CERTBOT_LOGS_DIR}/renewal-$(date +%Y%m%d).log"
mkdir -p "${CERTBOT_LOGS_DIR}"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "${LOG_FILE}"
}

log "Starting SSL certificate renewal process..."

# Check if certificates exist
if [[ ! -d "${CERTBOT_CONFIG_DIR}/live/${PRIMARY_DOMAIN}" ]]; then
    log "ERROR: No certificates found for ${PRIMARY_DOMAIN}"
    exit 1
fi

# Check certificate expiry (30 days)
if openssl x509 -checkend 2592000 -noout -in "${CERTBOT_CONFIG_DIR}/live/${PRIMARY_DOMAIN}/cert.pem" > /dev/null 2>&1; then
    log "Certificate for ${PRIMARY_DOMAIN} is still valid for more than 30 days. Skipping renewal."
    exit 0
fi

log "Certificate for ${PRIMARY_DOMAIN} expires within 30 days. Starting renewal..."

# Pre-renewal hook
{% if certbot_pre_hook %}
log "Executing pre-renewal hook..."
{{ certbot_pre_hook }}
{% endif %}

# Attempt renewal
if certbot renew --quiet --no-self-upgrade 2>>"${LOG_FILE}"; then
    log "Certificate renewal successful for ${PRIMARY_DOMAIN}"
    
    # Post-renewal hook
    {% if certbot_post_hook %}
    log "Executing post-renewal hook..."
    {{ certbot_post_hook }}
    {% endif %}
    
    # Reload webserver
    if systemctl is-active --quiet "${WEBSERVER_TYPE}"; then
        log "Reloading ${WEBSERVER_TYPE}..."
        systemctl reload "${WEBSERVER_TYPE}"
    fi
    
    # Backup certificates
    {% if certbot_backup_certificates %}
    BACKUP_DIR="{{ certbot_backup_dir }}/${PRIMARY_DOMAIN}-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "${BACKUP_DIR}"
    cp -r "${CERTBOT_CONFIG_DIR}/live/${PRIMARY_DOMAIN}/" "${BACKUP_DIR}/"
    log "Certificates backed up to ${BACKUP_DIR}"
    
    # Clean old backups
    find "{{ certbot_backup_dir }}" -name "${PRIMARY_DOMAIN}-*" -type d -mtime +{{ certbot_backup_retention_days }} -exec rm -rf {} \; 2>/dev/null || true
    {% endif %}
    
    log "Certificate renewal completed successfully"
else
    log "ERROR: Certificate renewal failed for ${PRIMARY_DOMAIN}"
    
    # Send notification email if configured
    {% if certbot_expiry_notification_email %}
    echo "SSL certificate renewal failed for ${PRIMARY_DOMAIN} on $(hostname)" | \
        mail -s "SSL Certificate Renewal Failed" "{{ certbot_expiry_notification_email }}" 2>/dev/null || true
    {% endif %}
    
    exit 1
fi

---

## roles/certbot/templates/renewal.conf.j2
# Certbot renewal configuration for {{ certbot_primary_domain }}
# Generated by Ansible - DO NOT EDIT MANUALLY

version = {{ certbot_version | default('1.0') }}
archive_dir = {{ certbot_config_dir }}/archive/{{ certbot_primary_domain }}
cert = {{ certbot_config_dir }}/live/{{ certbot_primary_domain }}/cert.pem
privkey = {{ certbot_config_dir }}/live/{{ certbot_primary_domain }}/privkey.pem
chain = {{ certbot_config_dir }}/live/{{ certbot_primary_domain }}/chain.pem
fullchain = {{ certbot_config_dir }}/live/{{ certbot_primary_domain }}/fullchain.pem

# Options used in the renewal process
[renewalparams]
account = {{ certbot_account_id | default('') }}
authenticator = {{ certbot_challenge_method }}
{% if certbot_challenge_method == 'webroot' %}
webroot_path = {{ certbot_webroot_path }}
{% elif certbot_challenge_method == 'dns' and certbot_dns_plugin != '' %}
dns_{{ certbot_dns_plugin }}_credentials = {{ certbot_dns_credentials_file }}
dns_{{ certbot_dns_plugin }}_propagation_seconds = {{ certbot_dns_propagation_seconds }}
{% endif %}
server = {{ 'https://acme-staging-v02.api.letsencrypt.org/directory' if certbot_staging else 'https://acme-v02.api.letsencrypt.org/directory' }}
key_type = rsa
rsa_key_size = {{ certbot_rsa_key_size }}

{% if certbot_pre_hook %}
pre_hook = {{ certbot_pre_hook }}
{% endif %}
{% if certbot_post_hook %}
post_hook = {{ certbot_post_hook }}
{% endif %}
{% if certbot_deploy_hook %}
deploy_hook = {{ certbot_deploy_hook }}
{% endif %}

---

## roles/certbot/templates/post-renewal-hook.sh.j2
#!/bin/bash
# Post-renewal hook for Laravel SSL certificates
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

RENEWED_DOMAINS="${RENEWED_DOMAINS:-}"
RENEWED_LINEAGE="${RENEWED_LINEAGE:-}"

# Only run if our domain was renewed
if [[ "${RENEWED_DOMAINS}" == *"{{ certbot_primary_domain }}"* ]]; then
    echo "Processing renewal for {{ certbot_primary_domain }}..."
    
    # Update Laravel .env with HTTPS settings
    LARAVEL_ROOT="{{ webserver_laravel_root | default('/var/www/laravel') }}"
    if [[ -f "${LARAVEL_ROOT}/.env" ]]; then
        # Ensure HTTPS is enabled in Laravel
        sed -i 's|^APP_URL=http://|APP_URL=https://|g' "${LARAVEL_ROOT}/.env"
        sed -i 's|^FORCE_HTTPS=.*|FORCE_HTTPS=true|g' "${LARAVEL_ROOT}/.env"
        
        # Add HTTPS settings if they don't exist
        if ! grep -q "FORCE_HTTPS=" "${LARAVEL_ROOT}/.env"; then
            echo "FORCE_HTTPS=true" >> "${LARAVEL_ROOT}/.env"
        fi
        if ! grep -q "SESSION_SECURE_COOKIE=" "${LARAVEL_ROOT}/.env"; then
            echo "SESSION_SECURE_COOKIE=true" >> "${LARAVEL_ROOT}/.env"
        fi
        
        echo "Updated Laravel .env for HTTPS"
    fi
    
    # Clear Laravel caches if artisan is available
    if [[ -f "${LARAVEL_ROOT}/artisan" ]]; then
        cd "${LARAVEL_ROOT}"
        sudo -u {{ webserver_user | default('www-data') }} php artisan config:cache 2>/dev/null || true
        echo "Cleared Laravel configuration cache"
    fi
    
    # Restart additional services if needed
    {% for service in certbot_services_to_restart %}
    if systemctl is-active --quiet {{ service }}; then
        systemctl reload {{ service }}
        echo "Reloaded {{ service }}"
    fi
    {% endfor %}
    
    echo "Post-renewal tasks completed for {{ certbot_primary_domain }}"
fi