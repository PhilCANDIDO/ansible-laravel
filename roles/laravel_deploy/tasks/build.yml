---
# roles/laravel_deploy/tasks/build.yml
# Composer installation and asset building tasks
# This runs BEFORE Laravel configuration (artisan commands need vendor/)

- name: (build) Install Composer dependencies
  ansible.builtin.command:
    cmd: >
      composer install 
      {{ laravel_composer_optimize | default(true) | ternary('--optimize-autoloader', '') }} 
      {{ laravel_composer_no_dev | default(laravel_app_env == 'production') | ternary('--no-dev', '') }}
      --no-interaction
      --prefer-dist
    chdir: "{{ laravel_deploy_path }}"
  become: true
  become_user: "{{ laravel_deploy_user }}"
  environment:
    COMPOSER_ALLOW_SUPERUSER: "1"
    COMPOSER_MEMORY_LIMIT: "-1"
  register: composer_install_result
  changed_when: "'Nothing to install, update or remove' not in composer_install_result.stdout"
  retries: 3
  delay: 10
  until: composer_install_result is succeeded
  tags: [build, composer]

- name: (build) Display Composer installation result
  ansible.builtin.debug:
    msg: |
      ðŸ“¦ Composer Dependencies:
      Status: {{ composer_install_result.changed | ternary('Dependencies updated', 'Dependencies up to date') }}
      Environment: {{ laravel_app_env }}
      Optimized: {{ laravel_composer_optimize | default(true) }}
      Dev dependencies: {{ laravel_composer_no_dev | default(laravel_app_env == 'production') | ternary('Excluded (--no-dev)', 'Included') }}
  tags: [build, composer]

- name: (build) Check if package.json exists
  ansible.builtin.stat:
    path: "{{ laravel_deploy_path }}/package.json"
  register: package_json_file
  tags: [build, npm]

- name: (build) Install NPM dependencies
  ansible.builtin.command:
    cmd: npm ci {{ laravel_npm_install_args | default('--production') }}
    chdir: "{{ laravel_deploy_path }}"
  become: true
  become_user: "{{ laravel_deploy_user }}"
  when: 
    - package_json_file.stat.exists
    - laravel_deploy_build_assets | default(true) | bool
  register: npm_install_result
  changed_when: "'added' in npm_install_result.stdout or 'updated' in npm_install_result.stdout"
  retries: 3
  delay: 10
  until: npm_install_result is succeeded
  tags: [build, npm]

- name: (build) Check if Vite config exists
  ansible.builtin.stat:
    path: "{{ laravel_deploy_path }}/vite.config.js"
  register: vite_config_file
  tags: [build, assets]

- name: (build) Check if Mix config exists (fallback)
  ansible.builtin.stat:
    path: "{{ laravel_deploy_path }}/webpack.mix.js"
  register: mix_config_file
  when: not vite_config_file.stat.exists
  tags: [build, assets]

- name: (build) Build assets with Vite
  ansible.builtin.command:
    cmd: npm run {{ laravel_npm_build_command | default('build') }}
    chdir: "{{ laravel_deploy_path }}"
  become: true
  become_user: "{{ laravel_deploy_user }}"
  when: 
    - package_json_file.stat.exists
    - vite_config_file.stat.exists
    - laravel_deploy_build_assets | default(true) | bool
    - laravel_use_vite | default(true) | bool
  register: vite_build_result
  changed_when: true
  tags: [build, assets, vite]

- name: (build) Build assets with Mix (fallback)
  ansible.builtin.command:
    cmd: npm run {{ laravel_npm_build_command_mix | default('production') }}
    chdir: "{{ laravel_deploy_path }}"
  become: true
  become_user: "{{ laravel_deploy_user }}"
  when: 
    - package_json_file.stat.exists
    - mix_config_file.stat.exists
    - laravel_deploy_build_assets | default(true) | bool
    - not (laravel_use_vite | default(true) | bool)
  register: mix_build_result
  changed_when: true
  failed_when: false
  tags: [build, assets, mix]

- name: (build) Display asset build result
  ansible.builtin.debug:
    msg: |
      ðŸŽ¨ Asset Building:
      Build system: {{ vite_config_file.stat.exists | ternary('Vite', (mix_config_file.stat.exists | ternary('Mix', 'None detected'))) }}
      Status: {{ (vite_build_result is defined and vite_build_result.changed) or (mix_build_result is defined and mix_build_result.changed) | ternary('Assets compiled', 'No assets to build') }}
      Environment: {{ laravel_app_env }}
  when: package_json_file.stat.exists
  tags: [build, assets]

- name: (build) Run custom Artisan commands (post-build)
  ansible.builtin.command:
    cmd: "{{ item }}"
    chdir: "{{ laravel_deploy_path }}"
  become: true
  become_user: "{{ laravel_deploy_user }}"
  loop: "{{ laravel_artisan_commands | default([]) }}"
  when: laravel_artisan_commands is defined and laravel_artisan_commands | length > 0
  tags: [build, artisan]

- name: (build) Verify Laravel installation
  ansible.builtin.command:
    cmd: php artisan --version
    chdir: "{{ laravel_deploy_path }}"
  become: true
  become_user: "{{ laravel_deploy_user }}"
  register: laravel_version_check
  changed_when: false
  tags: [build, verify]

- name: (build) Display Laravel installation verification
  ansible.builtin.debug:
    msg: |
      âœ… Laravel Installation Verified:
      {{ laravel_version_check.stdout }}
      
      ðŸ“‹ Build Summary:
      â”œâ”€â”€ Composer: {{ composer_install_result.changed | ternary('Dependencies updated', 'Up to date') }}
      â”œâ”€â”€ NPM: {{ package_json_file.stat.exists | ternary((npm_install_result.changed | default(false)) | ternary('Dependencies updated', 'Up to date'), 'No package.json') }}
      â””â”€â”€ Assets: {{ package_json_file.stat.exists | ternary('Compiled', 'None to build') }}
  tags: [build, verify]