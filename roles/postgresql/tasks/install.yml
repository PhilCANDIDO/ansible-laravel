---
# roles/postgresql/tasks/install.yml
# PostgreSQL installation tasks - FIXED

- name: (install) Set distribution-specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
    - "default.yml"
  tags: [postgresql, install]

# Debian/Ubuntu
- name: (install) Install prerequisites for PostgreSQL repository (Debian/Ubuntu)
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: true
  when: ansible_os_family == 'Debian'
  tags: [postgresql, install]

- name: (install) Add PostgreSQL repository key (Debian/Ubuntu)
  ansible.builtin.get_url:
    url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
    dest: /usr/share/keyrings/postgresql-archive-keyring.asc
    mode: '0644'
  when: ansible_os_family == 'Debian'
  tags: [postgresql, install]

- name: (install) Add PostgreSQL repository (Debian/Ubuntu)
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/postgresql-archive-keyring.asc] https://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
    state: present
    filename: pgdg
    update_cache: true
  when: ansible_os_family == 'Debian'
  tags: [postgresql, install]

- name: (install) Install PostgreSQL (Debian/Ubuntu)
  ansible.builtin.apt:
    name: "{{ postgresql_packages }}"
    state: present
    update_cache: true
  when: ansible_os_family == 'Debian'
  tags: [postgresql, install]

# RHEL/CentOS
- name: (install) Install PostgreSQL repository (RHEL/CentOS)
  ansible.builtin.dnf:
    name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    state: present
    disable_gpg_check: true
  when: ansible_os_family == 'RedHat'
  tags: [postgresql, install]

- name: (install) Install PostgreSQL (RHEL/CentOS)
  ansible.builtin.dnf:
    name: "{{ postgresql_packages }}"
    state: present
  when: ansible_os_family == 'RedHat'
  tags: [postgresql, install]

# Common PostgreSQL setup tasks
- name: (install) Check if PostgreSQL data directory exists and is initialized
  ansible.builtin.stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: pgdata_version
  tags: [postgresql, install]

- name: (install) Create PostgreSQL data directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ postgresql_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  when: not pgdata_version.stat.exists
  tags: [postgresql, install]

- name: (install) Initialize PostgreSQL database (RHEL/CentOS)
  ansible.builtin.command: "{{ postgresql_bin_path }}/postgresql-{{ postgresql_version }}-setup initdb"
  when: 
    - ansible_os_family == 'RedHat'
    - not pgdata_version.stat.exists
  register: postgresql_init_result
  changed_when: postgresql_init_result.rc == 0
  tags: [postgresql, install]

- name: (install) Initialize PostgreSQL database (Debian/Ubuntu)
  become: true
  become_user: postgres
  ansible.builtin.command: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
  when: 
    - ansible_os_family == 'Debian'
    - not pgdata_version.stat.exists
  register: postgresql_init_debian
  changed_when: postgresql_init_debian.rc == 0
  failed_when: false
  tags: [postgresql, install]

- name: (install) Ensure PostgreSQL service is enabled and started
  ansible.builtin.service:
    name: "{{ postgresql_service }}"
    state: started
    enabled: true
  tags: [postgresql, install]

- name: (install) Wait for PostgreSQL to be ready
  ansible.builtin.wait_for:
    port: "{{ postgresql_port }}"
    host: "127.0.0.1"
    delay: 5
    timeout: 30
  tags: [postgresql, install]

- name: (install) Check PostgreSQL service status
  ansible.builtin.command: systemctl is-active {{ postgresql_service }}
  register: postgresql_service_status
  changed_when: false
  failed_when: false
  tags: [postgresql, install]

- name: (install) Check PostgreSQL version
  become: true
  become_user: postgres
  ansible.builtin.command: psql -c "SELECT version();"
  register: postgresql_version_check
  changed_when: false
  check_mode: false
  failed_when: false
  tags: [postgresql, install]

- name: (install) Display PostgreSQL installation status
  ansible.builtin.debug:
    msg: |
      PostgreSQL Installation Status:
      ✅ Service: {{ postgresql_service_status.stdout if postgresql_service_status.rc == 0 else 'Not running' }}
      ✅ Port: {{ postgresql_port }}
      ✅ Data directory: {{ postgresql_data_dir }}
      {% if postgresql_version_check.rc == 0 %}
      ✅ Version check: {{ postgresql_version_check.stdout_lines[0] if postgresql_version_check.stdout_lines else 'Success' }}
      {% else %}
      ⚠️ Version check failed (this is normal before configuration)
      {% endif %}
  tags: [postgresql, install]