---
# roles/postgresql/tasks/configure.yml
# PostgreSQL configuration tasks - FIXED

- name: (configure) Ensure PostgreSQL service is running
  ansible.builtin.service:
    name: "{{ postgresql_service }}"
    state: started
    enabled: true
  tags: [postgresql, configure]

- name: (configure) Wait for PostgreSQL to be fully started
  ansible.builtin.wait_for:
    port: "{{ postgresql_port }}"
    host: "127.0.0.1"
    delay: 10
    timeout: 60
  tags: [postgresql, configure]

- name: (configure) Check if PostgreSQL is properly initialized
  ansible.builtin.stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: postgresql_initialized
  tags: [postgresql, configure]

- name: (configure) Fail if PostgreSQL is not initialized
  ansible.builtin.fail:
    msg: "PostgreSQL data directory is not properly initialized. Please check the installation."
  when: not postgresql_initialized.stat.exists
  tags: [postgresql, configure]

- name: (configure) Check if PostgreSQL accepts connections
  become: true
  become_user: postgres
  ansible.builtin.command: psql -c "SELECT 1;"
  register: postgres_connection_check
  changed_when: false
  failed_when: false
  tags: [postgresql, configure]

- name: (configure) Debug PostgreSQL connection status
  ansible.builtin.debug:
    msg: |
      PostgreSQL Connection Status:
      - Service: {{ ansible_facts.services[postgresql_service].state | default('unknown') if ansible_facts.services is defined else 'checking...' }}
      - Data directory: {{ postgresql_data_dir }}
      - Connection test result: {{ postgres_connection_check.rc | default('not tested') }}
      {% if postgres_connection_check.stderr is defined %}
      - Error: {{ postgres_connection_check.stderr }}
      {% endif %}
  tags: [postgresql, configure]

- name: (configure) Set PostgreSQL superuser password (only if connection works)
  become: true
  become_user: postgres
  ansible.builtin.shell: |
    psql -c "ALTER USER postgres WITH PASSWORD '{{ postgresql_admin_password }}';"
  when: 
    - postgresql_admin_password is defined
    - postgresql_admin_password != ''
    - postgres_connection_check.rc == 0
  no_log: true
  register: postgres_password_set
  changed_when: postgres_password_set.rc == 0
  tags: [postgresql, configure]

- name: (configure) Create PostgreSQL configuration files
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0644'
    backup: true
  notify: Restart PostgreSQL
  tags: [postgresql, configure]

- name: (configure) Create PostgreSQL authentication configuration
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0640'
    backup: true
  notify: Restart PostgreSQL
  tags: [postgresql, configure]

- name: (configure) Restart PostgreSQL to apply configuration changes
  ansible.builtin.service:
    name: "{{ postgresql_service }}"
    state: restarted
  when: postgres_password_set is changed or postgresql_config_updated is defined
  tags: [postgresql, configure]

- name: (configure) Wait for PostgreSQL to be ready after restart
  ansible.builtin.wait_for:
    port: "{{ postgresql_port }}"
    host: "127.0.0.1"
    delay: 10
    timeout: 60
  when: postgres_password_set is changed or postgresql_config_updated is defined
  tags: [postgresql, configure]

- name: (configure) Create PostgreSQL database for Laravel (if specified)
  community.postgresql.postgresql_db:
    name: "{{ postgresql_db_name }}"
    encoding: "{{ postgresql_db_encoding }}"
    lc_collate: "{{ postgresql_db_lc_collate }}"
    lc_ctype: "{{ postgresql_db_lc_ctype }}"
    state: present
    login_user: postgres
    login_password: "{{ postgresql_admin_password if postgresql_admin_password is defined and postgresql_admin_password != '' else omit }}"
    login_host: "127.0.0.1"
    login_port: "{{ postgresql_port }}"
  when: 
    - postgresql_db_name is defined
    - postgresql_db_name != ''
    - postgres_connection_check.rc == 0
  no_log: true
  tags: [postgresql, configure]

- name: (configure) Create PostgreSQL user for Laravel (if specified)
  community.postgresql.postgresql_user:
    name: "{{ postgresql_db_user }}"
    password: "{{ postgresql_db_password }}"
    db: "{{ postgresql_db_name }}"
    priv: "ALL"
    state: present
    login_user: postgres
    login_password: "{{ postgresql_admin_password if postgresql_admin_password is defined and postgresql_admin_password != '' else omit }}"
    login_host: "127.0.0.1"
    login_port: "{{ postgresql_port }}"
  when: 
    - postgresql_db_name is defined 
    - postgresql_db_name != ''
    - postgresql_db_user is defined
    - postgresql_db_user != ''
    - postgresql_db_password is defined
    - postgresql_db_password != ''
    - postgres_connection_check.rc == 0
  no_log: true
  tags: [postgresql, configure]

- name: (configure) Grant schema privileges to Laravel user
  community.postgresql.postgresql_privs:
    db: "{{ postgresql_db_name }}"
    role: "{{ postgresql_db_user }}"
    objs: ALL_IN_SCHEMA
    type: table
    privs: ALL
    schema: public
    login_user: postgres
    login_password: "{{ postgresql_admin_password if postgresql_admin_password is defined and postgresql_admin_password != '' else omit }}"
    login_host: "127.0.0.1"
    login_port: "{{ postgresql_port }}"
  when: 
    - postgresql_db_name is defined 
    - postgresql_db_name != ''
    - postgresql_db_user is defined
    - postgresql_db_user != ''
    - postgres_connection_check.rc == 0
  no_log: true
  tags: [postgresql, configure]

- name: (configure) Test final PostgreSQL connection
  community.postgresql.postgresql_info:
    login_user: postgres
    login_password: "{{ postgresql_admin_password if postgresql_admin_password is defined and postgresql_admin_password != '' else omit }}"
    login_host: "127.0.0.1"
    login_port: "{{ postgresql_port }}"
  when: postgres_connection_check.rc == 0
  no_log: true
  register: postgresql_final_test
  ignore_errors: true
  tags: [postgresql, configure]

- name: (configure) Display PostgreSQL configuration summary
  ansible.builtin.debug:
    msg: |
      
      üêò PostgreSQL Configuration Complete!
      
      üìã Status:
      ‚îú‚îÄ‚îÄ Service: {{ postgresql_service }} ({{ ansible_facts.services[postgresql_service].state | default('unknown') if ansible_facts.services is defined else 'active' }})
      ‚îú‚îÄ‚îÄ Port: {{ postgresql_port }}
      ‚îú‚îÄ‚îÄ Data directory: {{ postgresql_data_dir }}
      ‚îú‚îÄ‚îÄ Config path: {{ postgresql_config_path }}
      {% if postgresql_final_test is defined and postgresql_final_test is succeeded %}
      ‚îú‚îÄ‚îÄ Connection test: ‚úÖ Success
      {% elif postgres_connection_check.rc == 0 %}
      ‚îú‚îÄ‚îÄ Connection test: ‚úÖ Success (basic)
      {% else %}
      ‚îú‚îÄ‚îÄ Connection test: ‚ö†Ô∏è Check configuration
      {% endif %}
      {% if postgresql_db_name is defined and postgresql_db_name != '' %}
      ‚îú‚îÄ‚îÄ Laravel database: {{ postgresql_db_name }}
      ‚îî‚îÄ‚îÄ Laravel user: {{ postgresql_db_user }}
      {% endif %}
      
      üîó Connection details for Laravel:
      - DB_CONNECTION=pgsql
      - DB_HOST=127.0.0.1
      - DB_PORT={{ postgresql_port }}
      {% if postgresql_db_name is defined %}
      - DB_DATABASE={{ postgresql_db_name }}
      {% endif %}
      {% if postgresql_db_user is defined %}
      - DB_USERNAME={{ postgresql_db_user }}
      {% endif %}
  tags: [postgresql, configure]