---
# roles/mysql/tasks/install.yml
# MySQL installation tasks - FIXED for MySQL 8.0 authentication and race conditions

- name: (install) Set distribution-specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
    - "default.yml"
  tags: [mysql, install]

# Debian/Ubuntu
- name: (install) Install MySQL (Debian/Ubuntu)
  ansible.builtin.apt:
    name: "{{ mysql_packages }}"
    state: present
    update_cache: true
  when: ansible_os_family == 'Debian'
  tags: [mysql, install]

# RHEL/CentOS
- name: (install) Install MySQL (RHEL/CentOS)
  block:
    - name: (install) Install MySQL repository
      ansible.builtin.dnf:
        name: "{{ mysql_repo_package }}"
        state: present
      when: mysql_repo_package is defined

    - name: (install) Install MySQL packages
      ansible.builtin.dnf:
        name: "{{ mysql_packages }}"
        state: present
  when: ansible_os_family == 'RedHat'
  tags: [mysql, install]

# Common tasks
- name: (install) Ensure MySQL service is running and enabled
  ansible.builtin.service:
    name: "{{ mysql_service }}"
    state: started
    enabled: true
  tags: [mysql, install]

# CRITICAL: Wait for MySQL to be fully ready before proceeding
- name: (install) Wait for MySQL to be ready for connections
  ansible.builtin.wait_for:
    port: "{{ mysql_port | default(3306) }}"
    host: "127.0.0.1"
    timeout: 60
    delay: 5
  tags: [mysql, install]

# Additional wait to ensure MySQL is fully initialized (fixes race condition)
- name: (install) Additional wait for MySQL full initialization
  ansible.builtin.pause:
    seconds: 10
  tags: [mysql, install]

# Check current MySQL authentication status
- name: (install) Check if MySQL root password is already set
  ansible.builtin.command: >
    mysql -u root -e "SELECT 1" 2>/dev/null
  register: mysql_root_passwordless_check
  failed_when: false
  changed_when: false
  no_log: true
  tags: [mysql, install]

- name: (install) Check MySQL authentication method for root user
  ansible.builtin.shell: |
    mysql -u root -e "SELECT user, host, plugin FROM mysql.user WHERE user='root' AND host='localhost'" 2>/dev/null | grep -v "user\|+" || echo "no_auth_socket"
  register: mysql_auth_check
  changed_when: false
  failed_when: false
  when: mysql_root_passwordless_check.rc == 0
  tags: [mysql, install]

# Display current authentication status for debugging
- name: (install) Display current MySQL authentication status
  ansible.builtin.debug:
    msg: |
      MySQL Authentication Status:
      ‚îú‚îÄ‚îÄ Passwordless access: {{ mysql_root_passwordless_check.rc == 0 | ternary('‚úÖ Available', '‚ùå Not available') }}
      {% if mysql_auth_check is defined and mysql_auth_check.rc == 0 %}
      ‚îú‚îÄ‚îÄ Authentication method: {{ 'auth_socket' if 'auth_socket' in mysql_auth_check.stdout else 'password' }}
      ‚îî‚îÄ‚îÄ Root user info: {{ mysql_auth_check.stdout | default('N/A') }}
      {% else %}
      ‚îî‚îÄ‚îÄ Root user check: Failed or password required
      {% endif %}
  tags: [mysql, install]

# Handle fresh MySQL installation (no password set)
- name: (install) Handle fresh MySQL installation with no password
  block:
    - name: (install) Set MySQL root password on fresh installation
      community.mysql.mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        host: localhost
        priv: "*.*:ALL,GRANT"
        check_implicit_admin: true
        login_user: root
        login_password: ""
        login_unix_socket: "{{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
        state: present
      register: mysql_root_password_set
      when: mysql_root_password is defined and mysql_root_password != ''
      no_log: true

    - name: (install) Fix auth_socket plugin if present (MySQL 8.0)
      ansible.builtin.command: >
        mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ mysql_root_password }}'; FLUSH PRIVILEGES;"
      when: 
        - mysql_root_password is defined and mysql_root_password != ''
        - mysql_auth_check is defined
        - "'auth_socket' in mysql_auth_check.stdout"
        - mysql_root_password_set is succeeded
      register: mysql_auth_fix
      changed_when: mysql_auth_fix.rc == 0
      no_log: false

  when: 
    - mysql_root_passwordless_check.rc == 0
    - mysql_root_password is defined 
    - mysql_root_password != ''
  tags: [mysql, install]

# Handle case where password is already set (subsequent runs)
- name: (install) Test existing MySQL root password
  community.mysql.mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    host: localhost
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: "{{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
    state: present
  when: 
    - mysql_root_passwordless_check.rc != 0
    - mysql_root_password is defined 
    - mysql_root_password != ''
  register: mysql_password_test
  failed_when: false
  no_log: true
  tags: [mysql, install]

# Create MySQL root configuration file
- name: (install) Copy .my.cnf file with root password credentials
  ansible.builtin.template:
    src: root-my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: '0600'
  when: 
    - mysql_root_password is defined 
    - mysql_root_password != ''
    - (mysql_root_password_set is defined and mysql_root_password_set is succeeded) or 
      (mysql_password_test is defined and mysql_password_test is succeeded)
  tags: [mysql, install]

# Security cleanup (only after successful password setup)
- name: (install) MySQL security cleanup
  block:
    - name: (install) Delete anonymous MySQL users
      community.mysql.mysql_user:
        name: ''
        host_all: true
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: "{{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
      ignore_errors: true

    - name: (install) Remove MySQL test database
      community.mysql.mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: "{{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
      ignore_errors: true

    - name: (install) Remove remote root access (security)
      community.mysql.mysql_user:
        name: root
        host: "{{ item }}"
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: "{{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
      loop:
        - "%"
        - "127.0.0.1"
        - "::1"
        - "{{ ansible_hostname }}"
      ignore_errors: true

  when: 
    - mysql_root_password is defined 
    - mysql_root_password != ''
    - mysql_remove_anonymous_users | default(true) | bool
    - (mysql_root_password_set is defined and mysql_root_password_set is succeeded) or 
      (mysql_password_test is defined and mysql_password_test is succeeded)
  tags: [mysql, install, security]

# Final verification
- name: (install) Verify MySQL root password configuration
  community.mysql.mysql_info:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: "{{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
  register: mysql_final_test
  when: mysql_root_password is defined and mysql_root_password != ''
  no_log: true
  tags: [mysql, install]

- name: (install) Display MySQL installation summary
  ansible.builtin.debug:
    msg: |
      üóÉÔ∏è MySQL Installation Summary:
      
      ‚îú‚îÄ‚îÄ Service Status: ‚úÖ Running and enabled
      ‚îú‚îÄ‚îÄ Port: {{ mysql_port | default(3306) }} ‚úÖ Listening
      ‚îú‚îÄ‚îÄ Root Password: {{ mysql_final_test is defined and mysql_final_test is succeeded | ternary('‚úÖ Configured', '‚ö†Ô∏è Check configuration') }}
      ‚îú‚îÄ‚îÄ Security Cleanup: {{ mysql_remove_anonymous_users | default(true) | ternary('‚úÖ Applied', '‚ö†Ô∏è Skipped') }}
      ‚îî‚îÄ‚îÄ Socket: {{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}
      
      {% if mysql_final_test is defined and mysql_final_test is succeeded %}
      üìä Database Server: {{ mysql_final_test.version.full | default('MySQL Server') }}
      {% endif %}
      
      üîê Security: Anonymous users and test database removed
      üí° Ready for Laravel database creation
  tags: [mysql, install]