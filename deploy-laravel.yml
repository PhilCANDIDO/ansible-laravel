---
# Deploy a Laravel application to servers using modular roles
# Supports application-specific variable files with automatic webserver configuration

- name: Deploy Laravel Application with Automatic Webserver Configuration
  hosts: all
  become: true
  
  # Pre-tasks to load application-specific variables
  pre_tasks:
    - name: Validate app_name parameter for application deployment
      ansible.builtin.fail:
        msg: |
          ❌ Laravel application deployment requires the 'app_name' variable to be defined.
          
          Usage: ansible-playbook -i inventory/hosts.yml deploy-laravel.yml -e "app_name=neodatabase"
          
          This will automatically load variables from: vars/{{ app_name | default('UNDEFINED') }}.yml
      when: app_name is not defined

    - name: Check if application-specific variable file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/vars/{{ app_name }}.yml"
      register: app_vars_file
      delegate_to: localhost
      run_once: true

    - name: Validate application variable file exists
      ansible.builtin.fail:
        msg: |
          ❌ Application variable file not found: vars/{{ app_name }}.yml
          
          Please create the file vars/{{ app_name }}.yml with your application-specific variables.
          You can use vars/example-app.yml as a template.
      when: not app_vars_file.stat.exists

    - name: Load application-specific variables
      ansible.builtin.include_vars: "{{ playbook_dir }}/vars/{{ app_name }}.yml"

    - name: Validate required application variables
      ansible.builtin.assert:
        that:
          - webserver_server_name is defined
          - webserver_laravel_root is defined
          - app_repo_url is defined
          - app_repo_branch is defined
        fail_msg: |
          ❌ Required variables missing in vars/{{ app_name }}.yml:
          - webserver_server_name: Domain name for the application
          - webserver_laravel_root: Path where the application will be installed
          - app_repo_url: Git repository URL
          - app_repo_branch: Git branch to deploy
        success_msg: "✅ Required application variables validated"

    - name: 🚀 Display deployment information
      ansible.builtin.debug:
        msg: |
          🚀 Starting Laravel application deployment with automatic webserver configuration
          📱 Application: {{ app_name }}
          📊 Repository: {{ app_repo_url }}
          🌿 Branch: {{ app_repo_branch }}
          📁 Deploy directory: {{ webserver_laravel_root }}
          🌐 Domain: {{ webserver_server_name }}
          🔧 Webserver: {{ webserver_type | default('nginx') }}
          👤 Webserver user: {{ webserver_user }}
          🌐 Environment: {{ laravel_app_env | default('production') }}
          🌍 URL: {{ laravel_app_url }}
          {% if laravel_telescope_install | default(false) | bool %}
          🔭 Telescope: {{ laravel_telescope_install | ternary('Will be installed', 'Skipped') }}
          {% endif %}

  # Define variables for role compatibility
  vars:
    # Define webserver user based on distribution and webserver type
    webserver_user: >-
      {%- if ansible_os_family == 'Debian' -%}
        www-data
      {%- elif ansible_os_family == 'RedHat' -%}
        {%- if webserver_type == 'nginx' -%}
          nginx
        {%- else -%}
          apache
        {%- endif -%}
      {%- else -%}
        www-data
      {%- endif -%}
    
    webserver_group: "{{ webserver_user }}"

  # Deployment roles in order
  roles:
    # Main Laravel deployment role
    - role: laravel_deploy
      tags: [deploy, laravel]
    
    # Laravel webserver configuration role (NEW)
    - role: laravel_webserver
      tags: [deploy, webserver, configuration]
    
    # Optional Telescope installation and configuration
    - role: laravel_telescope
      when: laravel_telescope_install | default(false) | bool
      tags: [deploy, telescope]

  # Post-deployment tasks
  post_tasks:
    - name: 🎊 Final deployment summary
      ansible.builtin.debug:
        msg: |
          
          🎊 Laravel Application Deployment Complete!
          
          📋 Summary:
          ├── Application: {{ app_name }} ✅
          ├── Environment: {{ laravel_app_env | default('production') }} ✅
          ├── Domain: {{ webserver_server_name }} ✅
          ├── URL: {{ laravel_app_url }} ✅
          ├── Path: {{ webserver_laravel_root }} ✅
          ├── Webserver: {{ webserver_type | default('nginx') | title }} ✅
          ├── Webserver Config: ✅ Automatically configured
          {% if webserver_enable_ssl | default(false) | bool %}
          ├── SSL/HTTPS: {{ ssl_cert_file.stat.exists | default(false) and ssl_key_file.stat.exists | default(false) | ternary('✅ Configured', '⚠️ Check certificates') }}
          {% else %}
          ├── SSL/HTTPS: ⚠️ Disabled (HTTP only)
          {% endif %}
          {% if laravel_telescope_install | default(false) | bool %}
          ├── Telescope: Installed {% if laravel_telescope_production_enabled | default(false) %}(Production enabled){% else %}(Dev only){% endif %} ✅
          {% endif %}
          └── Deployment: {{ ansible_date_time.iso8601 }} ✅
          
          🌐 Your {{ app_name }} application is ready and fully configured!
          
          📚 Next Steps:
          - Test your application: {{ laravel_app_url }}
          {% if webserver_enable_ssl | default(false) | bool and not (ssl_cert_file.stat.exists | default(false) and ssl_key_file.stat.exists | default(false)) %}
          - ⚠️ Configure SSL certificates for HTTPS access
          {% endif %}
          {% if laravel_telescope_install | default(false) | bool and (laravel_telescope_production_enabled | default(false) | bool or laravel_app_env != 'production') %}
          - Access Telescope: {{ laravel_app_url }}/{{ laravel_telescope_path | default('telescope') }}
          {% endif %}
          - Monitor logs: {{ webserver_laravel_root }}/storage/logs/
          - Check webserver status: systemctl status {{ webserver_type | default('nginx') }}
          - Verify webserver config: {{ webserver_type | default('nginx') == 'nginx' | ternary('nginx -t', 'apache2ctl configtest') }}
          
          🔧 Webserver Configuration:
          ├── Config file: {{ (webserver_type | default('nginx') == 'nginx') | ternary('/etc/nginx/sites-available/' + app_name + '.conf', '/etc/apache2/sites-available/' + app_name + '.conf') }}
          ├── Access log: /var/log/{{ webserver_type | default('nginx') }}/{{ app_name }}-access.log
          └── Error log: /var/log/{{ webserver_type | default('nginx') }}/{{ app_name }}-error.log
      tags: [always]

  # Enhanced handlers for deployment with webserver management
  handlers:
    - name: Restart PHP-FPM
      ansible.builtin.service:
        name: "php{{ php_version | default('8.2') }}-fpm"
        state: restarted
      when: php_version is defined

    - name: Restart NGINX
      ansible.builtin.service:
        name: "{{ nginx_service | default('nginx') }}"
        state: restarted
      when: webserver_type | default('nginx') == 'nginx'

    - name: Restart Apache
      ansible.builtin.service:
        name: "{{ apache_service | default('apache2') }}"
        state: restarted
      when: webserver_type | default('nginx') == 'apache'

    - name: Reload NGINX
      ansible.builtin.service:
        name: "{{ nginx_service | default('nginx') }}"
        state: reloaded
      when: webserver_type | default('nginx') == 'nginx'

    - name: Reload Apache
      ansible.builtin.service:
        name: "{{ apache_service | default('apache2') }}"
        state: reloaded
      when: webserver_type | default('nginx') == 'apache'

    - name: Test NGINX Configuration
      ansible.builtin.command: nginx -t
      when: webserver_type | default('nginx') == 'nginx'
      changed_when: false

    - name: Test Apache Configuration
      ansible.builtin.command: apache2ctl configtest
      when: webserver_type | default('nginx') == 'apache'
      changed_when: false

    - name: Clear Laravel Caches
      ansible.builtin.command:
        cmd: php artisan optimize:clear
        chdir: "{{ webserver_laravel_root }}"
      become: true
      become_user: "{{ webserver_user }}"