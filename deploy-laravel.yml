---
- name: Deploy Laravel Application with SSL Support
  hosts: all
  become: true
  
  # Pre-tasks to load application-specific variables
  pre_tasks:
    - name: Validate app_name parameter for application deployment
      ansible.builtin.fail:
        msg: |
          ❌ Laravel application deployment requires the 'app_name' variable to be defined.
          
          Usage: ansible-playbook -i inventory/hosts.yml deploy-laravel.yml -e "app_name=neodatabase"
          
          This will automatically load variables from: vars/{{ app_name | default('UNDEFINED') }}.yml
      when: app_name is not defined

    - name: Check if application-specific variable file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/vars/{{ app_name }}.yml"
      register: app_vars_file
      delegate_to: localhost
      run_once: true

    - name: Validate application variable file exists
      ansible.builtin.fail:
        msg: |
          ❌ Application variable file not found: vars/{{ app_name }}.yml
          
          Please create the file vars/{{ app_name }}.yml with your application-specific variables.
          You can use vars/example-app.yml as a template.
      when: not app_vars_file.stat.exists

    - name: Load application-specific variables
      ansible.builtin.include_vars: "{{ playbook_dir }}/vars/{{ app_name }}.yml"

    - name: Validate required application variables
      ansible.builtin.assert:
        that:
          - webserver_server_name is defined
          - webserver_laravel_root is defined
          - app_repo_url is defined
          - app_repo_branch is defined
        fail_msg: |
          ❌ Required variables missing in vars/{{ app_name }}.yml:
          - webserver_server_name: Domain name for the application
          - webserver_laravel_root: Path where the application will be installed
          - app_repo_url: Git repository URL
          - app_repo_branch: Git branch to deploy
        success_msg: "✅ Required application variables validated"

    - name: 🚀 Display deployment information including SSL
      ansible.builtin.debug:
        msg: |
          🚀 Starting Laravel application deployment with SSL support
          📱 Application: {{ app_name }}
          📊 Repository: {{ app_repo_url }}
          🌿 Branch: {{ app_repo_branch }}
          📁 Deploy directory: {{ webserver_laravel_root }}
          👤 Webserver user: {{ webserver_user }}
          🌐 Environment: {{ laravel_app_env | default('production') }}
          🌍 URL: {{ laravel_app_url }}
          🔐 SSL enabled: {{ webserver_enable_ssl | default(false) | ternary('✅ Yes', '❌ No') }}
          {% if webserver_enable_ssl | default(false) %}
          🔗 HTTPS URL: https://{{ webserver_server_name }}
          📧 SSL email: {{ certbot_email | default('Not configured') }}
          🎯 SSL method: {{ certbot_challenge_method | default('webroot') }}
          {% endif %}
          {% if laravel_telescope_install | default(false) | bool %}
          🔭 Telescope: {{ laravel_telescope_install | ternary('Will be installed', 'Skipped') }}
          {% endif %}

  # Define variables for role compatibility
  vars:
    # Define webserver user based on distribution and webserver type
    webserver_user: >-
      {%- if ansible_os_family == 'Debian' -%}
        www-data
      {%- elif ansible_os_family == 'RedHat' -%}
        {%- if webserver_type == 'nginx' -%}
          nginx
        {%- else -%}
          apache
        {%- endif -%}
      {%- else -%}
        www-data
      {%- endif -%}
    
    webserver_group: "{{ webserver_user }}"

  # Deployment roles in order
  roles:
    # Main Laravel deployment role
    - role: laravel_deploy
      tags: [deploy, laravel]
    
    # SSL certificate generation and configuration (AFTER application deployment)
    - role: certbot
      when: webserver_enable_ssl | default(false) | bool
      tags: [deploy, ssl, certbot]
    
    # Optional Telescope installation and configuration
    - role: laravel_telescope
      when: laravel_telescope_install | default(false) | bool
      tags: [deploy, telescope]

  # Post-deployment tasks
  post_tasks:
    - name: 🎊 Final deployment summary with SSL status
      ansible.builtin.debug:
        msg: |
          
          🎊 Laravel Deployment Complete!
          
          📋 Summary:
          ├── Application: {{ app_name }} ✅
          ├── Environment: {{ laravel_app_env | default('production') }} ✅
          ├── HTTP URL: {{ laravel_app_url }} ✅
          {% if webserver_enable_ssl | default(false) %}
          ├── HTTPS URL: https://{{ webserver_server_name }} ✅
          ├── SSL Certificate: {{ certbot_primary_domain | default(webserver_server_name) }} ✅
          ├── SSL Auto-renewal: {{ certbot_auto_renew | default(true) | ternary('✅ Enabled', '❌ Manual') }}
          {% endif %}
          ├── Path: {{ webserver_laravel_root }} ✅
          {% if laravel_telescope_install | default(false) | bool %}
          ├── Telescope: Installed {% if laravel_telescope_production_enabled | default(false) %}(Production enabled){% else %}(Dev only){% endif %} ✅
          {% endif %}
          └── Deployment: {{ ansible_date_time.iso8601 }} ✅
          
          🌐 Your {{ app_name }} application is ready{% if webserver_enable_ssl | default(false) %} with HTTPS{% endif %}!
          
          📚 Next Steps:
          {% if webserver_enable_ssl | default(false) %}
          - Test HTTP redirect: http://{{ webserver_server_name }}
          - Test HTTPS: https://{{ webserver_server_name }}
          - Verify SSL: https://www.ssllabs.com/ssltest/analyze.html?d={{ webserver_server_name }}
          {% else %}
          - Test your application: {{ laravel_app_url }}
          - Consider enabling SSL with webserver_enable_ssl: true
          {% endif %}
          {% if laravel_telescope_install | default(false) | bool and (laravel_telescope_production_enabled | default(false) | bool or laravel_app_env != 'production') %}
          - Access Telescope: {{ laravel_app_url }}/{{ laravel_telescope_path | default('telescope') }}
          {% endif %}
          - Monitor logs: {{ webserver_laravel_root }}/storage/logs/
          - Check queue workers if using queues
          - Schedule regular backups
      tags: [always]

  # Handlers for deployment
  handlers:
    - name: Restart PHP-FPM
      ansible.builtin.service:
        name: "php{{ php_version | default('8.2') }}-fpm"
        state: restarted
      when: php_version is defined

    - name: Reload Web Server
      ansible.builtin.service:
        name: "{{ webserver_type | default('nginx') == 'nginx' | ternary(nginx_service | default('nginx'), apache_service | default('apache2')) }}"
        state: reloaded

    - name: Clear Laravel Caches
      ansible.builtin.command:
        cmd: php artisan optimize:clear
        chdir: "{{ webserver_laravel_root }}"
      become: true
      become_user: "{{ webserver_user }}"