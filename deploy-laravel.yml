---
# Deploy a Laravel application to servers

- name: Deploy Laravel Application
  hosts: all
  become: true
  vars:
    # Define webserver user based on distribution and webserver type
    webserver_user: >-
      {%- if ansible_os_family == 'Debian' -%}
        www-data
      {%- elif ansible_os_family == 'RedHat' -%}
        {%- if webserver_type == 'nginx' -%}
          nginx
        {%- else -%}
          apache
        {%- endif -%}
      {%- else -%}
        www-data
      {%- endif -%}
    
    webserver_group: "{{ webserver_user }}"
    
    # Set default values only if not already defined
    _laravel_deploy_repo: "{{ laravel_deploy_repo | default('https://github.com/yourusername/your-laravel-app.git') }}"
    _laravel_deploy_branch: "{{ laravel_deploy_branch | default('main') }}"
    _laravel_deploy_dir: "{{ webserver_laravel_root | default('/var/www/laravel') }}"
    _laravel_app_env: "{{ laravel_app_env | default('production') }}"
    _laravel_app_debug: "{{ laravel_app_debug | default('false') }}"
    _laravel_app_url: "{{ laravel_app_url | default('https://' + webserver_server_name) }}"
    
    # Database connection variables
    _laravel_app_db_connection: "{{ db_engine }}"
    _laravel_app_db_host: "127.0.0.1"
    _laravel_app_db_port: "{{ db_engine == 'postgresql' | ternary('5432', '3306') }}"
    _laravel_app_db_database: "{{ db_engine == 'mysql' | ternary(mysql_db_name, (db_engine == 'mariadb' | ternary(mariadb_db_name, postgresql_db_name))) }}"
    _laravel_app_db_username: "{{ db_engine == 'mysql' | ternary(mysql_db_user, (db_engine == 'mariadb' | ternary(mariadb_db_user, postgresql_db_user))) }}"
    _laravel_app_db_password: "{{ db_engine == 'mysql' | ternary(mysql_db_password, (db_engine == 'mariadb' | ternary(mariadb_db_password, postgresql_db_password))) }}"
    
    # Redis configuration (if enabled)
    _laravel_app_redis_host: "{{ enable_redis | ternary('127.0.0.1', 'null') }}"
    _laravel_app_redis_password: "{{ redis_requirepass | default('null') }}"
    _laravel_app_redis_port: "{{ enable_redis | ternary('6379', 'null') }}"
    
    # Laravel storage directories
    laravel_storage_dirs:
      - "bootstrap/cache"
      - "storage/app"
      - "storage/app/public"
      - "storage/framework"
      - "storage/framework/cache"
      - "storage/framework/sessions"
      - "storage/framework/views"
      - "storage/logs"

  tasks:
    - name: Display deployment information
      ansible.builtin.debug:
        msg: |
          üöÄ Starting Laravel application deployment
          üìä Repository: {{ _laravel_deploy_repo }}
          üìÅ Deploy directory: {{ _laravel_deploy_dir }}
          üë§ Webserver user: {{ webserver_user }}
          üåê Environment: {{ _laravel_app_env }}

    - name: Ensure Git is installed
      ansible.builtin.package:
        name: git
        state: present
      
    - name: Ensure deployment directory exists
      ansible.builtin.file:
        path: "{{ _laravel_deploy_dir }}"
        state: directory
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0755'
      
    - name: Clone or update Laravel repository
      ansible.builtin.git:
        repo: "{{ _laravel_deploy_repo }}"
        dest: "{{ _laravel_deploy_dir }}"
        version: "{{ _laravel_deploy_branch }}"
        force: true
      become: true
      become_user: "{{ webserver_user }}"
      
    - name: Create Laravel storage directories
      ansible.builtin.file:
        path: "{{ _laravel_deploy_dir }}/{{ item }}"
        state: directory
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0775'
      loop: "{{ laravel_storage_dirs }}"
    
    - name: Check if .env.example exists
      ansible.builtin.stat:
        path: "{{ _laravel_deploy_dir }}/.env.example"
      register: env_example_file
    
    - name: Copy .env.example to .env if .env doesn't exist
      ansible.builtin.copy:
        src: "{{ _laravel_deploy_dir }}/.env.example"
        dest: "{{ _laravel_deploy_dir }}/.env"
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0640'
        remote_src: true
        force: false
      when: env_example_file.stat.exists
    
    - name: Configure Laravel .env file
      ansible.builtin.lineinfile:
        path: "{{ _laravel_deploy_dir }}/.env"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0640'
        create: true
      loop:
        - { regexp: '^APP_NAME=', line: 'APP_NAME="{{ laravel_app_name | default("Laravel") }}"' }
        - { regexp: '^APP_ENV=', line: 'APP_ENV={{ _laravel_app_env }}' }
        - { regexp: '^APP_DEBUG=', line: 'APP_DEBUG={{ _laravel_app_debug }}' }
        - { regexp: '^APP_URL=', line: 'APP_URL={{ _laravel_app_url }}' }
        - { regexp: '^DB_CONNECTION=', line: 'DB_CONNECTION={{ _laravel_app_db_connection }}' }
        - { regexp: '^DB_HOST=', line: 'DB_HOST={{ _laravel_app_db_host }}' }
        - { regexp: '^DB_PORT=', line: 'DB_PORT={{ _laravel_app_db_port }}' }
        - { regexp: '^DB_DATABASE=', line: 'DB_DATABASE={{ _laravel_app_db_database }}' }
        - { regexp: '^DB_USERNAME=', line: 'DB_USERNAME={{ _laravel_app_db_username }}' }
        - { regexp: '^DB_PASSWORD=', line: 'DB_PASSWORD={{ _laravel_app_db_password }}' }
        - { regexp: '^REDIS_HOST=', line: 'REDIS_HOST={{ _laravel_app_redis_host }}' }
        - { regexp: '^REDIS_PASSWORD=', line: 'REDIS_PASSWORD={{ _laravel_app_redis_password }}' }
        - { regexp: '^REDIS_PORT=', line: 'REDIS_PORT={{ _laravel_app_redis_port }}' }
      notify: Clear Laravel configuration cache
    
    - name: Install Composer dependencies
      ansible.builtin.command:
        cmd: composer install --no-dev --optimize-autoloader --no-interaction
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      environment:
        COMPOSER_ALLOW_SUPERUSER: "1"
      register: composer_install_result
      changed_when: "'Nothing to install, update or remove' not in composer_install_result.stdout"
      
    - name: Generate Laravel application key
      ansible.builtin.command:
        cmd: php artisan key:generate --force
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      register: key_generate
      changed_when: "'Application key set successfully' in key_generate.stdout"
      
    - name: Check if migrations are needed
      ansible.builtin.command:
        cmd: php artisan migrate:status
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      register: migration_status
      changed_when: false
      failed_when: false
      
    - name: Run database migrations
      ansible.builtin.command:
        cmd: php artisan migrate --force
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      register: migrations
      changed_when: "'Nothing to migrate' not in migrations.stdout"
      when: migration_status.rc == 0
      
    - name: Create storage link
      ansible.builtin.command:
        cmd: php artisan storage:link
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      args:
        creates: "{{ _laravel_deploy_dir }}/public/storage"
    
    - name: Check if package.json exists
      ansible.builtin.stat:
        path: "{{ _laravel_deploy_dir }}/package.json"
      register: package_json_file
    
    - name: Install NPM dependencies
      ansible.builtin.command:
        cmd: npm ci --production
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      when: package_json_file.stat.exists
      register: npm_install_result
      changed_when: "'added' in npm_install_result.stdout or 'updated' in npm_install_result.stdout"
      
    - name: Check if Vite config exists
      ansible.builtin.stat:
        path: "{{ _laravel_deploy_dir }}/vite.config.js"
      register: vite_config_file
    
    - name: Build assets with Vite
      ansible.builtin.command:
        cmd: npm run build
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      when: 
        - package_json_file.stat.exists
        - vite_config_file.stat.exists
      register: vite_build_result
      changed_when: true
      
    - name: Build assets with Mix (fallback)
      ansible.builtin.command:
        cmd: npm run production
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      when: 
        - package_json_file.stat.exists
        - not vite_config_file.stat.exists
      register: mix_build_result
      changed_when: true
      failed_when: false
      
    - name: Optimize Laravel for production
      ansible.builtin.command:
        cmd: php artisan optimize
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
      notify: Restart PHP-FPM
    
    - name: Set correct permissions for Laravel directories
      ansible.builtin.file:
        path: "{{ _laravel_deploy_dir }}"
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0755'
        recurse: true
      
    - name: Ensure storage and bootstrap/cache directories are writable
      ansible.builtin.file:
        path: "{{ _laravel_deploy_dir }}/{{ item }}"
        state: directory
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0775'
        recurse: true
      loop:
        - "storage"
        - "bootstrap/cache"

    - name: Remove phpinfo test file if it exists (security)
      ansible.builtin.file:
        path: "{{ _laravel_deploy_dir }}/public/phpinfo.php"
        state: absent
      when: _laravel_app_env == 'production'

    - name: Display deployment completion summary
      ansible.builtin.debug:
        msg: |
          üéâ Laravel application deployment completed!
          
          üìç Application Details:
          ‚îú‚îÄ‚îÄ URL: {{ _laravel_app_url }}
          ‚îú‚îÄ‚îÄ Path: {{ _laravel_deploy_dir }}
          ‚îú‚îÄ‚îÄ Environment: {{ _laravel_app_env }}
          ‚îú‚îÄ‚îÄ Database: {{ _laravel_app_db_connection }}
          ‚îî‚îÄ‚îÄ User: {{ webserver_user }}
          
          üîÑ Actions Performed:
          ‚îú‚îÄ‚îÄ Repository cloned/updated ‚úÖ
          ‚îú‚îÄ‚îÄ Dependencies installed ‚úÖ
          ‚îú‚îÄ‚îÄ Application key generated ‚úÖ
          ‚îú‚îÄ‚îÄ Migrations run ‚úÖ
          ‚îú‚îÄ‚îÄ Storage linked ‚úÖ
          ‚îú‚îÄ‚îÄ Assets compiled ‚úÖ
          ‚îî‚îÄ‚îÄ Application optimized ‚úÖ
          
          üåê Your Laravel application is now live!

  handlers:
    - name: Clear Laravel configuration cache
      ansible.builtin.command:
        cmd: php artisan config:clear
        chdir: "{{ _laravel_deploy_dir }}"
      become: true
      become_user: "{{ webserver_user }}"
    
    - name: Restart PHP-FPM
      ansible.builtin.service:
        name: "php{{ php_version }}-fpm"
        state: restarted
      when: php_version is defined