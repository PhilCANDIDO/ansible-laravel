---
# Main playbook for Laravel 11 environment setup
# This playbook ONLY installs the prerequisites for Laravel 11
# Application deployment should be done with deploy-laravel.yml

- name: Setup Laravel 11 Environment Prerequisites
  hosts: all
  become: true
  
  # Pre-tasks to validate and load configuration
  pre_tasks:
    - name: Display environment setup information
      ansible.builtin.debug:
        msg: |
          🚀 Setting up Laravel {{ laravel_version | default('11') }} environment prerequisites
          📊 Target: {{ inventory_hostname }}
          🗃️ Database: {{ db_engine | default('mysql') }}
          🌐 Webserver: {{ webserver_type | default('nginx') }}
          📦 Redis: {{ enable_redis | default(false) | ternary('enabled', 'disabled') }}
          🔧 This playbook installs ONLY the environment prerequisites
          📋 Use deploy-laravel.yml to deploy your Laravel application
      tags: [always]

    - name: Load default version mappings
      ansible.builtin.include_vars: "{{ playbook_dir }}/vars/versions.yml"
      tags: [always]

    - name: Update package cache
      ansible.builtin.package:
        update_cache: true
      when: update_cache | default(true) | bool
      tags: [always]
      
    - name: Install essential system packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - curl
        - git
        - unzip
        - zip
        - acl
        - python3-pip
        - python3-setuptools
        - ca-certificates
        - gnupg
        - lsb-release
      tags: [common, system]
      
    - name: Install Python dependencies for Ansible modules (Debian/Ubuntu)
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - python3-pymysql
        - python3-psycopg2
      when: ansible_os_family == "Debian"
      tags: [common, python]

    - name: Install Python dependencies for Ansible modules (RHEL/CentOS)
      ansible.builtin.pip:
        name: "{{ item }}"
        state: present
      loop:
        - PyMySQL
        - psycopg2-binary
      when: ansible_os_family == "RedHat"
      ignore_errors: true
      tags: [common, python]

    - name: Verify Laravel version compatibility
      ansible.builtin.assert:
        that:
          - laravel_version | default('11') in laravel_versions
        fail_msg: "Laravel version {{ laravel_version | default('11') }} is not supported. Available: {{ laravel_versions.keys() | list }}"
        success_msg: "✅ Laravel {{ laravel_version | default('11') }} is supported"
      tags: [always]
  
  roles:
    # Core PHP stack
    - role: php
      tags: [php, core]
      when: true
    
    - role: composer
      tags: [composer, core]
      when: true
    
    # Frontend tools
    - role: nodejs
      tags: [nodejs, frontend]
      when: true
    
    # Database engines (conditional)
    - role: mysql
      tags: [database, mysql]
      when: db_engine | default('mysql') == 'mysql'
    
    - role: mariadb
      tags: [database, mariadb]
      when: db_engine | default('mysql') == 'mariadb'
    
    - role: postgresql
      tags: [database, postgresql]
      when: db_engine | default('mysql') == 'postgresql'
    
    # Caching (optional)
    - role: redis
      tags: [redis, cache]
      when: enable_redis | default(false) | bool
    
    # Web server (last to ensure proper integration)
    - role: webserver
      tags: [webserver, nginx, apache]
      when: true
  
  post_tasks:
    - name: Create generic Laravel directory structure (optional)
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0755'
      loop:
        - "/var/www"
        - "/var/www/html"
      when: create_base_directories | default(true) | bool
      tags: [directories]

    - name: Create test phpinfo file for verification (development only)
      ansible.builtin.copy:
        content: |
          <?php
          echo "<h1>Laravel {{ laravel_version | default('11') }} Environment Ready!</h1>";
          echo "<h2>System Information</h2>";
          echo "<p><strong>Server:</strong> {{ inventory_hostname }}</p>";
          echo "<p><strong>OS:</strong> {{ ansible_distribution }} {{ ansible_distribution_version }}</p>";
          echo "<p><strong>Laravel Version:</strong> {{ laravel_version | default('11') }}</p>";
          echo "<p><strong>Database Engine:</strong> {{ db_engine | default('mysql') }}</p>";
          echo "<p><strong>Webserver:</strong> {{ webserver_type | default('nginx') }}</p>";
          echo "<p><strong>Redis:</strong> {{ enable_redis | default(false) | ternary('Enabled', 'Disabled') }}</p>";
          echo "<h2>PHP Information</h2>";
          phpinfo();
        dest: "/var/www/html/phpinfo.php"
        owner: "{{ webserver_user }}"
        group: "{{ webserver_group }}"
        mode: '0644'
      when: 
        - environment_type | default('production') != 'production'
        - create_test_files | default(true) | bool
      tags: [development, testing]

    - name: Verify PHP-FPM socket exists
      ansible.builtin.stat:
        path: "{{ webserver_php_fpm_socket | regex_replace('unix:', '') }}"
      register: php_fpm_socket_check
      when: webserver_type | default('nginx') == 'nginx'
      tags: [verification]

    - name: Test database connectivity
      block:
        - name: Test MySQL connection
          community.mysql.mysql_info:
            login_user: root
            login_password: "{{ mysql_root_password }}"
            login_unix_socket: "{{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
          register: mysql_connection_test
          when: 
            - db_engine | default('mysql') == 'mysql'
            - mysql_root_password is defined
            - mysql_root_password != ''
          ignore_errors: true

        - name: Test MariaDB connection
          community.mysql.mysql_info:
            login_user: root
            login_password: "{{ mariadb_root_password }}"
            login_unix_socket: "{{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
          register: mariadb_connection_test
          when: 
            - db_engine | default('mysql') == 'mariadb'
            - mariadb_root_password is defined
            - mariadb_root_password != ''
          ignore_errors: true

        - name: Test PostgreSQL connection
          become: true
          become_user: postgres
          ansible.builtin.command: psql -c "SELECT version();"
          register: postgresql_connection_test
          when: db_engine | default('mysql') == 'postgresql'
          ignore_errors: true
          changed_when: false
      tags: [verification, database]

    - name: Display Laravel environment setup summary
      ansible.builtin.debug:
        msg: |
          
          🎉 Laravel {{ laravel_version | default('11') }} environment prerequisites installed successfully!
          
          📋 Installed Components:
          ├── PHP {{ php_version | default('8.2') }} ✅
          ├── Composer {{ composer_version | default('latest') }} ✅
          ├── Node.js {{ nodejs_version | default('20.x') }} ✅
          {% if db_engine | default('mysql') == 'mysql' %}
          ├── MySQL {{ mysql_version | default('8.0') }} {{ mysql_connection_test is defined and mysql_connection_test is succeeded | ternary('✅', '⚠️') }}
          {% elif db_engine | default('mysql') == 'mariadb' %}
          ├── MariaDB {{ mariadb_version | default('10.11') }} {{ mariadb_connection_test is defined and mariadb_connection_test is succeeded | ternary('✅', '⚠️') }}
          {% elif db_engine | default('mysql') == 'postgresql' %}
          ├── PostgreSQL {{ postgresql_version | default('15') }} {{ postgresql_connection_test is defined and postgresql_connection_test.rc == 0 | ternary('✅', '⚠️') }}
          {% endif %}
          {% if enable_redis | default(false) | bool %}
          ├── Redis {{ redis_version | default('7.0') }} ✅
          {% endif %}
          └── {{ webserver_type | default('nginx') | capitalize }} web server ✅
          
          🌐 Web Server Configuration:
          ├── Type: {{ webserver_type | default('nginx') | capitalize }}
          ├── User: {{ webserver_user }}
          ├── Group: {{ webserver_group }}
          └── PHP-FPM: {{ php_fpm_socket_check.stat.exists | default(false) | ternary('Connected ✅', 'Check configuration ⚠️') }}
          
          🔧 Environment Status:
          ├── Ready for Laravel applications: ✅
          ├── Database engine: {{ db_engine | default('mysql') }}
          └── Redis support: {{ enable_redis | default(false) | ternary('Available', 'Not installed') }}
          
          🚀 Next Steps:
          1. Create application-specific variables: vars/your-app-name.yml
          2. Deploy your Laravel application:
             ansible-playbook -i inventory/hosts.yml deploy-laravel.yml -e "app_name=your-app-name"
          3. Configure your application's .env file
          4. Run Laravel setup commands (migrations, cache, etc.)
          
          {% if environment_type | default('production') != 'production' and create_test_files | default(true) | bool %}
          🧪 Test Environment:
          └── PHP Info: http://{{ ansible_default_ipv4.address | default('localhost') }}/phpinfo.php
          {% endif %}
          
          📚 Documentation:
          ├── Application deployment: docs/Application-Specific-Vars.md
          ├── Laravel deployment guide: docs/Laravel11-Ansible-Deployment-Guide.md
          └── Usage guide: usage-guide.md
      tags: [always]

    - name: Save environment setup information
      ansible.builtin.copy:
        content: |
          # Laravel {{ laravel_version | default('11') }} Environment Prerequisites
          # Generated on {{ ansible_date_time.iso8601 }}
          
          ## Server Information
          - Hostname: {{ inventory_hostname }}
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Architecture: {{ ansible_architecture }}
          - Kernel: {{ ansible_kernel }}
          
          ## Installed Components
          - PHP: {{ php_version | default('8.2') }}
          - Composer: {{ composer_version | default('latest') }}
          - Node.js: {{ nodejs_version | default('20.x') }}
          - Database: {{ db_engine | default('mysql') }} {{ laravel_versions[laravel_version | default('11')].databases[db_engine | default('mysql')].version }}
          {% if enable_redis | default(false) | bool %}
          - Redis: {{ redis_version | default('7.0') }}
          {% endif %}
          - Webserver: {{ webserver_type | default('nginx') }}
          
          ## Configuration
          - Webserver user: {{ webserver_user }}
          - Webserver group: {{ webserver_group }}
          - PHP-FPM socket: {{ webserver_php_fpm_socket | default('unix:/var/run/php/php8.2-fpm.sock') }}
          
          ## Database Configuration
          {% if db_engine | default('mysql') == 'mysql' %}
          - MySQL Port: {{ mysql_port | default(3306) }}
          - MySQL Socket: {{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}
          {% elif db_engine | default('mysql') == 'mariadb' %}
          - MariaDB Port: {{ mariadb_port | default(3306) }}
          - MariaDB Socket: {{ '/var/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}
          {% elif db_engine | default('mysql') == 'postgresql' %}
          - PostgreSQL Port: {{ postgresql_port | default(5432) }}
          - PostgreSQL Data Dir: {{ postgresql_data_dir }}
          {% endif %}
          
          {% if enable_redis | default(false) | bool %}
          ## Redis Configuration
          - Redis Port: {{ redis_port | default(6379) }}
          - Redis Config: {{ redis_conf_path }}
          {% endif %}
          
          ## Next Steps
          1. Deploy applications using: ansible-playbook deploy-laravel.yml -e "app_name=your-app"
          2. Configure application-specific variables in vars/your-app.yml
          3. Set up SSL certificates if needed
          4. Configure monitoring and backups
          
          ## Service Status Check Commands
          ```bash
          # Check all services
          sudo systemctl status {{ webserver_type | default('nginx') }} php{{ php_version | default('8.2') }}-fpm {{ db_engine | default('mysql') == 'mysql' | ternary('mysql', (db_engine | default('mysql') == 'mariadb' | ternary('mariadb', 'postgresql'))) }}{% if enable_redis | default(false) | bool %} redis{% endif %}
          
          # Test PHP
          php -v
          
          # Test Composer
          composer --version
          
          # Test Node.js
          node --version
          npm --version
          
          # Test database connection
          {% if db_engine | default('mysql') in ['mysql', 'mariadb'] %}
          mysql -u root -p -e "SELECT version();"
          {% elif db_engine | default('mysql') == 'postgresql' %}
          sudo -u postgres psql -c "SELECT version();"
          {% endif %}
          
          {% if enable_redis | default(false) | bool %}
          # Test Redis
          redis-cli ping
          {% endif %}
          ```
        dest: "/root/laravel-environment-setup-{{ ansible_date_time.epoch }}.md"
        mode: '0600'
      tags: [documentation]

  handlers:
    - name: Restart web server
      ansible.builtin.service:
        name: "{{ webserver_type | default('nginx') == 'nginx' | ternary(nginx_service | default('nginx'), apache_service | default('apache2')) }}"
        state: restarted
      listen: "restart web services"

    - name: Restart PHP-FPM
      ansible.builtin.service:
        name: "{{ php_fpm_service | default('php8.2-fpm') }}"
        state: restarted
      listen: "restart web services"